nodes = []

class Node:
    def __init__(self, par):
        self.p = par
        self.s = set()
        self.lab = ''
        self.sonlabs = set()
        nodes.append(self)

    def __repr__(self):
        return '%s(s=%s)' % (self.lab or 'Node', self.s)


def buildtree(tree):
    class cur:
        pos = 0

    dd = {}

    def getnode(par):
        cc = Node(par)
        if tree[cur.pos] == '(':
            while tree[cur.pos] in '(,':
                cur.pos += 1
                cc.s.add(getnode(cc))
            cur.pos += 1
        ff = cur.pos
        while tree[cur.pos] not in '), ;':
            cur.pos += 1
        nam = tree[ff:cur.pos]
        cc.lab = nam
        if nam != '':
            dd[nam] = cc
        return cc

    return getnode(None), dd


def cnt(cur):
    trt = set()
    for son in cur.s:
        trt.update(cnt(son))
    if cur.lab:
        trt.add(cur.lab)
    cur.sonlabs = trt
    return trt


def generate_character_table(root, all_labels):
    table = []
    nn = len(all_labels)
    for j in nodes:
        if len(j.sonlabs) not in (0, 1, nn - 1, nn):
            row = ''.join(map(str, map(int, map(j.sonlabs.__contains__, all_labels))))
            table.append(row)
    return table


if __name__ == "__main__":
    with open(r"C:\Users\rifak\Downloads\rosalind_ctbl (4).txt") as f:
        tree_str = f.readline().strip()
        root, d = buildtree(tree_str)
        all_labels = sorted(cnt(root))
        character_table = generate_character_table(root, all_labels)

        for row in character_table:
            print(row)
